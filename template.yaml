AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM Template for oldsprucetree college football score prediction site

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    MemorySize: 128

Resources:
  PredictionProcessingStateMachine:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      DefinitionUri: statemachine/prediction_processing.asl.json
      DefinitionSubstitutions:
        CfbdDataIngestionFunction: !GetAtt CfbdDataIngestionFunction.Arn
        ApplyPpaAttributionFunction: !GetAtt ApplyPpaAttributionFunction.Arn
        StackGameTransformationFunction: !GetAtt StackGameTransformationFunction.Arn
        RecruitingTransformationFunction: !GetAtt RecruitingTransformationFunction.Arn
        PreForecastTransformationFunction: !GetAtt PreForecastTransformationFunction.Arn
        ApplyPredictionFunction: !GetAtt ApplyPredictionFunction.Arn
      #Events:
      #  GameProcessingSchedule:
      #    Type: Schedule # More info about Schedule Event Source: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-statemachine-schedule.html
      #    Properties:
      #      Description: Schedule to run pre game processing on a weekly basis
      #      Enabled: False # This schedule is disabled by default to avoid incurring charges.
      #      Schedule: "rate(1 week)"
      Policies: # Find out more about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - LambdaInvokePolicy:
            FunctionName: !Ref CfbdDataIngestionFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ApplyPpaAttributionFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref StackGameTransformationFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref RecruitingTransformationFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref PreForecastTransformationFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ApplyPredictionFunction

  CfbdDataIngestionFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      PackageType: Image
      Timeout: 900
      MemorySize: 128
      Architectures:
        - x86_64
      ImageConfig:
        Command:
          - app.cfbd_data_ingestion
      Policies:
        - Statement:
            - Sid: Cfbds3ArchiveAccessPolicy
              Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
                - s3:DeleteObject
              Resource: arn:aws:s3:::cfbd-data-archive/*
        - Statement:
            - Sid: CfbdSecretManagerAccess
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: arn:aws:secretsmanager:us-east-1:430738663938:secret:prod/cfbd/apiKey-ZRZ1c3
      Environment:
        Variables:
          s3_destination: cfbd-data-archive
          secret_name: prod/cfbd/apiKey
          secret_region: us-east-1
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./cfbd_data
      DockerTag: cfbdProcessing-v1

  ApplyPpaAttributionFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Timeout: 900
      MemorySize: 540
      Architectures:
        - x86_64
      ImageConfig:
        Command:
          - app.apply_ppa_attribution
      Policies:
        - Statement:
            - Sid: Cfbds3ArchiveAccessPolicy
              Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
                - s3:DeleteObject
              Resource: arn:aws:s3:::cfbd-data-archive/*
      Environment:
        Variables:
          s3_source_bucket: cfbd-data-archive
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./cfbd_data
      DockerTag: cfbdProcessing-v1

  StackGameTransformationFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Timeout: 900
      MemorySize: 360
      Architectures:
        - x86_64
      ImageConfig:
        Command:
          - app.stack_game_tranformation
      Policies:
        - Statement:
            - Sid: Cfbds3ArchiveAccessPolicy
              Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
                - s3:DeleteObject
              Resource: arn:aws:s3:::cfbd-data-archive/*
      Environment:
        Variables:
          s3_source_bucket: cfbd-data-archive
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./cfbd_data
      DockerTag: cfbdProcessing-v1

  RecruitingTransformationFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Timeout: 900
      MemorySize: 360
      Architectures:
        - x86_64
      ImageConfig:
        Command:
          - app.recruiting_tranformation
      Policies:
        - Statement:
            - Sid: Cfbds3ArchiveAccessPolicy
              Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
                - s3:DeleteObject
              Resource: arn:aws:s3:::cfbd-data-archive/*
      Environment:
        Variables:
          s3_source_bucket: cfbd-data-archive
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./cfbd_data
      DockerTag: cfbdProcessing-v1

  PreForecastTransformationFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Timeout: 900
      MemorySize: 360
      Architectures:
        - x86_64
      ImageConfig:
        Command:
          - app.pre_forecasting_transformation
      Policies:
        - Statement:
            - Sid: Cfbds3ArchiveAccessPolicy
              Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
                - s3:DeleteObject
              Resource: arn:aws:s3:::cfbd-data-archive/*
      Environment:
        Variables:
          s3_source_bucket: cfbd-data-archive
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./cfbd_data
      DockerTag: cfbdProcessing-v1

  ApplyPredictionFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Timeout: 900
      MemorySize: 720
      Architectures:
        - x86_64
      ImageConfig:
        Command:
          - app.apply_prediction
      Policies:
        - Statement:
            - Sid: Cfbds3ArchiveAccessPolicy
              Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
                - s3:DeleteObject
              Resource: arn:aws:s3:::cfbd-data-archive/*
      Environment:
        Variables:
          s3_source_bucket: cfbd-data-archive
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./cfbd_data
      DockerTag: cfbdProcessing-v1

  PredictionOutputFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Timeout: 900
      MemorySize: 128
      Architectures:
        - x86_64
      ImageConfig:
        Command:
          - app.prediction_output
      Policies:
        - Statement:
            - Sid: Cfbds3ArchiveAccessPolicy
              Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
                - s3:DeleteObject
              Resource: arn:aws:s3:::cfbd-data-archive/*
      Environment:
        Variables:
          s3_source_bucket: cfbd-data-archive
          output_prediction_file: CFBD_Analysis/output/output_prediction.txt
      Events:
        PredictionOutput:
          Type: Api
          Properties:
            Path: /prediction_output
            Method: get
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./cfbd_data
      DockerTag: cfbdProcessing-v1

  DataIngestionWrapperFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Timeout: 900
      MemorySize: 128
      Architectures:
        - x86_64
      ImageConfig:
        Command:
          - app.cfbd_ingestion_wrapper
      Policies:
        - Statement:
            - Sid: CfbdIngestionInvokePolicy
              Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: !GetAtt CfbdDataIngestionFunction.Arn
      Environment:
        Variables:
          CfbdFunction: !GetAtt CfbdDataIngestionFunction.Arn
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./cfbd_data
      DockerTag: cfbdProcessing-v1

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Join:
          - ''
          - - ApplicationInsights-SAM-
            - Ref: AWS::StackName
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0

  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Fn::Join:
          - ''
          - - ApplicationInsights-SAM-
            - Ref: AWS::StackName
      AutoConfigurationEnabled: 'true'
    DependsOn: ApplicationResourceGroup

#  S3DataExtract:
#    Type: 'AWS::S3::Bucket'
#    Properties:
#      BucketName: !Sub 'cfbd-data-archive'
#      PublicAccessBlockConfiguration:
#        BlockPublicAcls: true
#        BlockPublicPolicy: true
#        IgnorePublicAcls: true
#        RestrictPublicBuckets: true
#      VersioningConfiguration:
#        Status: Enabled
#      BucketEncryption:
#        ServerSideEncryptionConfiguration:
#          - ServerSideEncryptionByDefault:
#              SSEAlgorithm: 'AES256'

  # Web Platform Infrastructure Resources
  GameLineAPI:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Description: A simple CORS compliant API
      Name: GameLineAPI
      EndpointConfiguration:
        Types:
          - REGIONAL

  # The Resource (/hello) of our API
  GameLineAPIResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt
        - GameLineAPI
        - RootResourceId
      PathPart: hello
      RestApiId: !Ref GameLineAPI

  # The method to call (GET) for our API
  GameLineAPIGETMethod:
    Type: 'AWS::ApiGateway::Method'
    #checkov:skip=CKV_AWS_59: "This API does not expose backend service"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: MOCK
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: "{\n \"statusCode\": 200\n}"
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: "{\"message\": \"Hello World!\"}"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: Empty
      RestApiId: !Ref GameLineAPI
      ResourceId: !Ref GameLineAPIResource

  # A deployment resource for deploying our API
  Deployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - GameLineAPIGETMethod
    Properties:
      RestApiId: !Ref GameLineAPI
      StageName: v1

  # The Amazon S3 bucket into which our Single Page Application build files must be deployed
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub 'react-cors-spa-${GameLineAPI}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: s3-access-logs
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'

  # The Amazon S3 bucket policy for securing the bucket hosting the application
  BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PolicyForCloudFrontPrivateContent
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CFOriginAccessIdentity.S3CanonicalUserId
            Action: 's3:GetObject*'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3Bucket
                - /*
      Bucket: !Ref S3Bucket

  # The Amazon S3 bucket into which access logs from S3 (for the application) and CloudFront will be put
  LoggingBucket:
    #checkov:skip=CKV_AWS_18: "This bucket is private and only for storing logs"
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub 'react-cors-spa-${GameLineAPI}-logs'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      AccessControl: LogDeliveryWrite
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
    DeletionPolicy: Delete

  # The Amazon CloudFront distribution exposing our Single Page Application
  CFDistribution:
    #checkov:skip=CKV_AWS_68: "For demo purposes and to reduce cost, no WAF is configured"
    Type: 'AWS::CloudFront::Distribution'
    DependsOn:
      - CFOriginAccessIdentity
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt S3Bucket.RegionalDomainName
            Id: myS3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CFOriginAccessIdentity}"
        Enabled: 'true'
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: myS3Origin
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_All
        Logging:
          Bucket: !GetAtt LoggingBucket.RegionalDomainName
          Prefix: 'cloudfront-access-logs'
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
          MinimumProtocolVersion: 'TLSv1.2_2021'

  # The Amazon CloudFront origin access identity
  CFOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    DependsOn:
      - S3Bucket
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'access-identity-react-cors-spa-${GameLineAPI}'

Outputs:
  CfbdDataIngestionFunction:
    Description: "College Football Data Ingestion Function ARN"
    Value: !GetAtt CfbdDataIngestionFunction.Arn
  ApplyPpaAttributionFunction:
    Description: "PPA Regression Function"
    Value: !GetAtt ApplyPpaAttributionFunction.Arn
  DataIngestionWrapperFunction:
    Description: "Data Ingestion Wrapper Function ARN"
    Value: !GetAtt DataIngestionWrapperFunction.Arn
  PredictionOutputFunction:
    Description: "API Prediction Output Function ARN"
    Value: !GetAtt PredictionOutputFunction.Arn
  RecruitingTransformationFunction:
    Description: "API Prediction Output Function ARN"
    Value: !GetAtt RecruitingTransformationFunction.Arn
  StackGameTransformationFunction:
    Description: "API Prediction Output Function ARN"
    Value: !GetAtt StackGameTransformationFunction.Arn
  PreForecastTransformationFunction:
    Description: "API Prediction Output Function ARN"
    Value: !GetAtt PreForecastTransformationFunction.Arn

  WebAPIEndpoint:
    Value: !Sub "https://${GameLineAPI}.execute-api.${AWS::Region}.amazonaws.com/v1/hello"
  WebBucketName:
    Value: !Sub "react-cors-spa-${CFOriginAccessIdentity}"
